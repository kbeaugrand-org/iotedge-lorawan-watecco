name: Continuous Deployment

# Controls when the workflow will run
on:
  release:
    types: [published]
  workflow_dispatch:

env:
  registry_name: ghcr.io
  image_name: ghcr.io/${{ github.repository_owner }}/az-iotedge-watteco-decoder-module
  module_path: src/modules/WattecoDecoderModule

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  tests: 
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: "Test the decoder"
    steps:
          # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with: 
          submodules: true
        
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install dependencies
        working-directory: ${{ env.module_path }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
    
      - name: Make Codec files replacements
        working-directory: ${{ env.module_path }}
        run: |
          chmod +x replaceCodecImports.sh 
          ./replaceCodecImports.sh

      - name: Test with pytest
        working-directory: ${{ env.module_path }}
        run: pytest --cov=./ --cov-report=xml test_main.py

  # This workflow contains a single job called "build"
  build:
      # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: tests
    strategy:
      matrix:
        arch:  
          - name: amd64
            platformName: linux/amd64
          - name: arm32v7
            platformName: linux/arm/v7
          - name: arm64v8
            platformName: linux/arm64/v8

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with: 
          submodules: true     

      - id: docker-tag
        uses: yuya-takeyama/docker-tag-from-github-ref-action@v1
      
      - name: Docker Login
        # You may pin to the exact commit or the version.
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ env.registry_name }}
          username:  ${{ github.actor }}
          password:  ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push ${{ matrix.arch.name }}
        # You may pin to the exact commit or the version.
        uses: docker/build-push-action@v2.7.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          # Build's context is the set of files located in the specified PATH or URL
          context: ${{ env.module_path }}
          # Path to the Dockerfile
          file: "${{ env.module_path }}/Dockerfile.${{ matrix.arch.name }}"
          # Push is a shorthand for --output=type=registry
          push: true
          # List of SSH agent socket or keys to expose to the build
          ssh: # optional
          # List of tags
          tags: ${{ env.image_name }}:${{ steps.docker-tag.outputs.tag }}-${{ matrix.arch.name }}
          platforms: ${{ matrix.arch.platformName }}
          
  publish: 
    runs-on: ubuntu-latest
    needs: build
    steps:
      - id: docker-tag
        uses: yuya-takeyama/docker-tag-from-github-ref-action@v1

      - name: Docker Login
        # You may pin to the exact commit or the version.
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ env.registry_name }}
          username:  ${{ github.actor }}
          password:  ${{ secrets.GITHUB_TOKEN }}

      - name: Create the manifest
        run: docker manifest create ${{ env.image_name }}:${{ steps.docker-tag.outputs.tag }} --amend ${{ env.image_name }}:${{ steps.docker-tag.outputs.tag }}-amd64 --amend ${{ env.image_name }}:${{ steps.docker-tag.outputs.tag }}-arm32v7 --amend ${{ env.image_name }}:${{ steps.docker-tag.outputs.tag }}-arm64v8

      - name: Publish  the manifest
        run: docker manifest push ${{ env.image_name }}:${{ steps.docker-tag.outputs.tag }}

      - name: Create the manifest
        run: docker manifest create ${{ env.image_name }}:latest --amend ${{ env.image_name }}:${{ steps.docker-tag.outputs.tag }}-amd64 --amend ${{ env.image_name }}:${{ steps.docker-tag.outputs.tag }}-arm32v7 --amend ${{ env.image_name }}:${{ steps.docker-tag.outputs.tag }}-arm64v8

      - name: Publish  the manifest
        run: docker manifest push ${{ env.image_name }}:latest
