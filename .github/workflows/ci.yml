name: Continuous Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches-ignore: [ master ]
  pull_request:
    branches: [ master ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  image_name: kbeaugrand/az-iotedge-watteco-decoder-module
  module_path: src/modules/WattecoDecoderModule

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  tests: 
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: "Test the decoder"
    steps:
          # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with: 
          submodules: true
        
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ env.module_path }}/requirements.txt
          pip install -r ${{ env.module_path }}/requirements-dev.txt
    
      - name: Test with pytest
        run: coverage run --source=. -m ${{ env.module_path }}/test_main.py

      - name: Upload coverage
        shell: pwsh
        run: coverage report -m
      
  # This workflow contains a single job called "build"
  build:
      # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:  [amd64, arm32v7, arm64v8]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with: 
          submodules: true
      
      # - name: Docker Login
      #   # You may pin to the exact commit or the version.
      #   uses: docker/login-action@v1.10.0
      #   with:
      #     # Username used to log against the Docker registry
      #     username:  ${{ secrets.DOCKER_LOGIN }}
      #     # Password or personal access token used to log against the Docker registry
      #     password:  ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push ${{ matrix.arch }}
        # You may pin to the exact commit or the version.
        uses: docker/build-push-action@v2.7.0
        with:
          # Build's context is the set of files located in the specified PATH or URL
          context: ${{ env.module_path }}
          # Path to the Dockerfile
          file: "${{ env.module_path }}/Dockerfile.amd64"
          # Push is a shorthand for --output=type=registry
          push: false
          # List of SSH agent socket or keys to expose to the build
          ssh: # optional
          # List of tags
          # tags: ${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}-${{ matrix.arch }}
          
      # - name: Create the manifest
      #   run: docker manifest create "${IMAGE_NAME}:${TAG_NAME}" --amend "${IMAGE_NAME}:${TAG_NAME}-amd64" --amend "${IMAGE_NAME}:${TAG_NAME}-arm32v7" --amend "${IMAGE_NAME}:${TAG_NAME}-arm64v8"

      # - name: Publish  the manifest
      #   run: docker manifest push "${IMAGE_NAME}:${TAG_NAME}"